(ns tic-tac-toe\rule\tests
  (:require phel\test :refer [deftest is])
  (:require tic-tac-toe\rule))

(deftest rule-test
  (let [matrix (rule/create-matrix)]
    (is (= 3 (count matrix)))
    (is (= 3 (count (matrix 0))))))

(deftest value-map-test
  (let [matrix [[:blank :mine :yours] [8 :blank :blank] [:blank :blank :blank]]]
    (is (= " " (rule/matrix-cell-char matrix {:x 0 :y 0})))
    (is (= "●" (rule/matrix-cell-char matrix {:x 0 :y 1})))
    (is (= "○" (rule/matrix-cell-char matrix {:x 0 :y 2})))
    (is (= "_" (rule/matrix-cell-char matrix {:x 1 :y 0})))))

(deftest matrix-puttable-test
  (let [matrix [[:blank :mine :yours]
                [8 :mine :blank]
                [:blank :mine :blank]]]
    (is (= true (rule/matrix-puttable matrix {:x 0 :y 0}))))
  (let [matrix [[:blank :mine :yours]
                [8 :mine :blank]
                [:blank :mine :blank]]]
    (is (= false (rule/matrix-puttable matrix {:x 0 :y 1}))))
  (let [matrix [[:blank :mine :yours]
                [8 :mine :blank]
                [:blank :mine :blank]]]
    (is (= false (rule/matrix-puttable matrix {:x 0 :y 2})))))

(deftest judgement-test
  (let [matrix [[:blank :mine :yours]
                [8 :mine :blank]
                [:blank :mine :blank]]]
    (is (= :mine (rule/matrix-winner matrix)) "virtical"))
  (let [matrix [[:blank :blank :mine]
                [8 :blank :mine]
                [:blank :blank :mine]]]
    (is (= :mine (rule/matrix-winner matrix)) "virtical"))
  (let [matrix [[:mine :blank :yours]
                [8 :mine :blank]
                [:blank :blank :mine]]]
    (is (= :mine (rule/matrix-winner matrix)) "cross check"))
  (let [matrix [[:blank :blank :mine]
                [:blank :mine :blank]
                [:mine :blank :blank]]]
    (is (= :mine (rule/matrix-winner matrix)) "cross check reverse"))
  (let [matrix [[:yours :yours :yours]
                [8 :mine :blank]
                [:blank :mine :blank]]]
    (is (= :yours (rule/matrix-winner matrix)) "horizon"))
  (let [matrix [[:yours :blank :yours]
                [8 :mine :blank]
                [:blank :mine :blank]]]
    (is (= nil (rule/matrix-winner matrix))))
  (let [matrix [[:yours :mine :yours]
                [:mine :mine :yours]
                [:mine :yours :mine]]]
    (is (= :draw (rule/matrix-winner matrix)) "draw")))

(deftest matrix-opposite-position-test
  (let [matrix [[:mine :blank :blank]
                [:mine :blank :blank]
                [:blank :blank :blank]]]
    (is (= [2 0] (rule/matrix-opposite-position matrix)) "x line"))
  (let [matrix [[:mine :mine :blank]
                [:blank :blank :blank]
                [:blank :blank :blank]]]
    (is (= [0 2] (rule/matrix-opposite-position matrix)) "y line"))
  (let [matrix [[:blank :blank :blank]
                [:blank :blank :blank]
                [:blank :blank :blank]]]
    (is (= [1 1] (rule/matrix-opposite-position matrix)) "center"))
  (let [matrix [[:mine :mine :mine]
                [:mine :mine :mine]
                [:mine :mine :blank]]]
    (is (= [2 2] (rule/matrix-opposite-position matrix)) "center"))
  (let [matrix [[:mine :mine :blank]
                [:yours :yours :blank]
                [:mine :blank :blank]]]
    (is (= [0 2] (rule/matrix-opposite-position matrix)) "y line 2"))
  (let [matrix [[:mine :mine :yours]
                [:yours :mine :blank]
                [:mine :blank :blank]]]
    (is (= [2 1] (rule/matrix-opposite-position matrix)) "multiple reach")))

