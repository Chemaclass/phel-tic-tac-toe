(ns tic-tac-toe\rule)

(defn create-matrix []
  [[:blank :blank :blank]
   [:blank :blank :blank]
   [:blank :blank :blank]])

(def- value-map {:blank " "
                 :mine "●"
                 :yours "○"})

(defn matrix-cell-char [matrix {:x x :y y}]
  (let [value (get-in matrix [x y])]
    (or (value-map value) "_")))

(defn matrix-puttable [matrix {:x x :y y}]
  (= (get-in matrix [x y]) :blank))

(defn- check-line [matrix target p1 p2 p3]
  (and
    (= (get-in matrix p1) target)
    (= (get-in matrix p2) target)
    (= (get-in matrix p3) target)
    target))

(defn- search-lines [fn matrix target]
  (or
    (apply fn [matrix target [0 0] [0 1] [0 2]])
    (apply fn [matrix target [1 0] [1 1] [1 2]])
    (apply fn [matrix target [2 0] [2 1] [2 2]])
    (apply fn [matrix target [0 0] [1 0] [2 0]])
    (apply fn [matrix target [0 1] [1 1] [2 1]])
    (apply fn [matrix target [0 2] [1 2] [2 2]])
    (apply fn [matrix target [0 0] [1 1] [2 2]])
    (apply fn [matrix target [0 2] [1 1] [2 0]])))

(defn matrix-winner [matrix]
  (if (nil? (find (fn [x] (= x :blank)) (flatten matrix)))
    :draw
    (find identity (map (fn [x] (search-lines check-line matrix x)) [:mine :yours]))))

(defn- next-position [matrix target p1 p2 p3]
  (let [count (count (filter (fn [x] (= (get-in matrix x) target)) [p1 p2 p3]))]
    (if (= count 2)
      (find (fn [x] (= (get-in matrix x) :blank)) [p1 p2 p3]))))

(defn- cells []
  (for [x :range [0 3]
        y :range [0 3]]
    [x y]))

(defn matrix-opposite-position [matrix]
  (let [defence (search-lines next-position matrix :mine)]
    (or
      defence
      (if (= (get-in matrix [1 1]) :blank) [1 1])
      (find (fn [x] (= (get-in matrix x) :blank)) (cells)))))
