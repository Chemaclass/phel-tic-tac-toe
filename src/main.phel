(ns phel-tic-tac-toe\main
  (:require phel-cli-gui\terminal-gui :as gui)
  (:require tic-tac-toe\rule))

(gui/add-output-formatter {:style-name "cursor" :foreground "black" :background "red" :options ["bold"]})

(defstruct cursor-struct [width height x y])

# Hexadecimal keys
(def input-keys
  {"1b5b44" :left
   "1b5b42" :down
   "1b5b43" :right
   "1b5b41" :up
   "0a"     :enter})

(defn update-cursor [c input]
  (if (nil? input)
    c
    (let [allow-left (>= 0 (c :x))
          allow-right (<= (dec (c :width)) (c :x))
          allow-up (>= 0 (c :y))
          allow-down (<= (dec (c :height)) (c :y))]
      (cond
        (= input :left)  (if allow-left  c (update c :x dec))
        (= input :right) (if allow-right c (update c :x inc))
        (= input :up)    (if allow-up    c (update c :y dec))
        (= input :down)  (if allow-down  c (update c :y inc))
        true c))))

(defn update-matrix [matrix cursor input]
  (if (nil? input)
    matrix
    (cond
      (= input :enter) (if (rule/matrix-puttable matrix cursor)
                         (put-in matrix [(cursor :x) (cursor :y)] :mine)
                         matrix)
      true matrix)))

(defn- board-position [{:x x :y y}]
  {:x (+ (* x 2) 2) :y (inc (* y 2))})

(defn render-cursor [cursor matrix]
  (let [{:x board-x :y board-y} (board-position cursor)
        char (rule/matrix-cell-char matrix cursor)]
    (gui/render board-x board-y char "cursor")))

(defn game-over [message]
  (println message)
  (php/exit))

(defn draw-board []
  (gui/clear-screen)
  (gui/render 0 0 "┌─┬─┬─┐")
  (for [y :range [1 7 2]]
    (for [x :range [1 8 2]]
      (gui/render x y "│"))) 
  (for [y :range [2 5 2]]
    (gui/render 0 y "├─┼─┼─┤"))
  (gui/render 0 6 "└─┴─┴─┘")
  (gui/render 10 0 "Operation:")
  (gui/render 10 1 "←: cursor move left")
  (gui/render 10 2 "→: cursor move right")
  (gui/render 10 3 "↑: cursor move up")
  (gui/render 10 4 "↓: cursor move down")
  (gui/render 10 5 "Enter: put a stone"))

(defn render-board [matrix]
  (for [y :range [0 3]]
    (for [x :range [0 3]]
      (let [{:x board-x :y board-y} (board-position {:x x :y y})]
        (gui/render board-x board-y (rule/matrix-cell-char matrix {:x x :y y}))))))

(def initial-cursor (cursor-struct 3 3 0 0))

(defn judgement [matrix]
  (case (rule/matrix-winner matrix)
    :draw (game-over "DRAW!")
    :mine (game-over "You WON!")
    :yours (game-over "You LOSE!")))

(defn tic-tac-toe []
  (draw-board)
  (let [cursor  initial-cursor
        matrix (rule/create-matrix)]
    (render-cursor cursor matrix)
    (loop [cursor cursor
           matrix matrix]
  
      (php/usleep 50000)
      (let [{:hex in} (gui/read-input 3)
            input (input-keys in)]
        (if input
          (let [new-cursor (update-cursor cursor input)
                new-matrix (update-matrix matrix new-cursor input)]
            (render-board matrix)
            (render-cursor new-cursor new-matrix)

            (judgement new-matrix)

            # opposite
            (if (and (= input :enter) (rule/matrix-puttable matrix cursor))
              (let [pos (rule/matrix-opposite-position new-matrix)
                    opposite-matrix (put-in new-matrix pos :yours)]
                (render-board opposite-matrix)

                (judgement opposite-matrix)
                (recur new-cursor opposite-matrix))
              (recur new-cursor new-matrix)))
          (recur cursor matrix))))))

(tic-tac-toe)
