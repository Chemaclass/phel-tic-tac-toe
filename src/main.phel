(ns phel-tic-tac-toe\main
  (:require phel-cli-gui\terminal-gui :as gui))

(gui/add-output-formatter {:style-name "cursor" :foreground "black" :background "red" :options ["bold"]})

(defstruct board-struct [width height])
(defstruct cursor-struct [width height x y])

(def board (board-struct 7 7))

# Hexadecimal keys
(def directions
  {"1b5b44" :left
   "1b5b42" :down
   "1b5b43" :right
   "1b5b41" :up})

(defn move-cursor [c next-direction]
  (if (nil? next-direction)
    c
    (case next-direction
      :left (if (>= 0 (c :x)) c (update-in c [:x] dec))
      :right (if (<= (dec (c :width)) (c :x)) c (update-in c [:x] inc))
      :up (if (>= 0 (c :y)) c (update-in c [:y] dec))
      :down (if (<= (dec (c :height)) (c :y)) c (update-in c [:y] inc)))))


(defn render-cursor [cursor]
  (let [x (inc (inc (* (cursor :x) 2)))
        y (inc (* (cursor :y) 2))]
    (gui/render x y " " "cursor")))

(defn game-over [cursor]
  (render-cursor cursor)
  (println "GAME OVER")
  (php/exit))

(defn render-board []
  (gui/clear-screen)
  (gui/render-board board {:horizontal "-" :vertical "|" :corner "+"})
  (for [y :range [1 7 2]]
    (for [x :range [3 6 2]]
      (gui/render x y "│"))) 
  (for [y :range [2 5 2]]
    (gui/render 2 y "─┼─┼─"))
  )

(def initial-cursor (cursor-struct 3 3 0 0))

(defn simple-game []
  (loop [cursor initial-cursor]
    (render-board)
    (println "Move your cursor with the arrow-keys [UP, DOWN, LEFT, RIGHT]")

    (let [{:hex in} (gui/read-input 3)
          next-direction (directions in)
          new-cursor (move-cursor cursor next-direction)]

      (render-cursor new-cursor)
      (php/usleep 50000)
      (recur new-cursor))))

(simple-game)
